package db

import (
	"database/sql"
	"log"
	"time"

	_ "github.com/lib/pq"
)

//DB global variable
var DB *sql.DB
var tables = [...]string{"chats", "messages", "users"}

//InitDB create connection with database
func InitDB(dataSourceName string) {
	var err error
	start := time.Now()
	ticker := time.NewTicker(time.Millisecond * 500)
	for t := range ticker.C {
		DB, err = sql.Open("postgres", dataSourceName)
		if err == nil {
			break
		}
		if (t.Second() - start.Second()) > 5 {
			log.Fatal("Can't connect to db")
			break
		}
	}
	if err = DB.Ping(); err != nil {
		log.Fatal(err)
	}
}

//CheckTables in database, if not presented create them
func CheckTables() {
	rows, err := DB.Query(`select tablename from pg_catalog.pg_tables
						   where schemaname != 'pg_catalog'
						   and schemaname != 'information_schema' 
						   order by tablename;`)
	if err != nil {
		log.Fatal(err)
		return
	}
	defer rows.Close()

	bdTables := make(map[string]bool, 0)

	for i := 0; rows.Next(); i++ {
		var temp string
		err := rows.Scan(&temp)
		if err != nil {
			log.Fatal(err)
		}
		bdTables[temp] = true
	}

	for _, str := range tables {
		if _, ok := bdTables[str]; !ok {
			createTable(str)
			log.Println("Created table - ", str)
		}
	}
}

func createTable(s string) {
	switch s {
	case "users":
		_, err := DB.Exec(`create table users(
						   id int generated by default as identity,
						   username varchar,
						   created_at timestamp,
						   primary key(id, username)
						   );`)
		if err != nil {
			log.Fatal(err)
			return
		}
	case "chats":
		_, err := DB.Exec(`create table chats(
						   id int generated by default as identity,
						   name varchar,
					       users int array,
						   created_at timestamp,
						   last_message timestamp,
						   primary key(id, name)
						   );`)
		if err != nil {
			log.Fatal(err)
			return
		}
	case "messages":
		_, err := DB.Exec(`create table messages(
						   id int generated by default as identity,
						   chat integer,
						   author integer,
						   text text,
						   created_at timestamp,
						   primary key(id)
						   );`)
		if err != nil {
			log.Fatal(err)
			return
		}
	}
}
